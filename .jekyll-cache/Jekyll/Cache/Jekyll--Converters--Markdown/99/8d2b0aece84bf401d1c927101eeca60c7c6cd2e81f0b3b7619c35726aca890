I"!u<blockquote>
  <p>虽然我遵循着“作业截至即公开”的原则，但这次代码写得比较个性化（俗称”骚”)，不容易涉及作业雷同,所以提前就post了出来。</p>
</blockquote>

<h3 id="设计思路">设计思路</h3>
<blockquote>
  <p>鲁迅说过：树都能用递归解决。</p>

  <p>鲁迅还说过：不能重复造轮子。</p>
</blockquote>

<p>根据以上两个原则，再加上我写过几次经典的中缀表达式计算了（就是用栈算后缀表达式再算值那种经典套路），所以我决心使用递归来处理这个问题。</p>

<p>同时，解题也是用的“刷算法题”代码模式，而不是我一贯使用的“项目式”的代码套路。这次的代码更强调技巧和效果，而不是重用和鲁棒。</p>

<ol>
  <li>确定算法大致方向
后序的计算一棵树</li>
  <li>任务解耦
要算一个四则运算的中缀表达式，可以把任务分成几块
    <ol>
      <li>计算加减法</li>
      <li>计算乘除法</li>
      <li>获得叶子节点(或者把括号里的打包,当叶子)</li>
    </ol>
  </li>
  <li>处理一些特殊问题
    <ol>
      <li>带括号的：直接把括号内的拿出来算，算完以后当叶子节点放回原树</li>
      <li>输出后缀表达式：在找到叶子时，将数字输出;在产生计算时，将计算符号输出，即构成后缀表达式</li>
    </ol>
  </li>
</ol>

<h3 id="代码">代码</h3>
<p>引用的外部文件只有iostream，函数(包括引用)一共35行，充分发扬了递归算法写得快的优点。</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="kt">int</span> <span class="nf">getValue</span><span class="p">(</span><span class="kt">int</span> <span class="n">priority</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">priority</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">char</span> <span class="n">c</span> <span class="o">=</span> <span class="n">static_cast</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">(</span><span class="n">cin</span><span class="p">.</span><span class="n">peek</span><span class="p">());</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">c</span> <span class="o">==</span> <span class="sc">'('</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">cin</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">getValue</span><span class="p">();</span>
            <span class="n">cin</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">while</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;=</span> <span class="sc">'0'</span> <span class="n">and</span> <span class="n">c</span> <span class="o">&lt;=</span> <span class="sc">'9'</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">c</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">;</span>
                <span class="n">cin</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
                <span class="n">c</span> <span class="o">=</span> <span class="n">static_cast</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">(</span><span class="n">cin</span><span class="p">.</span><span class="n">peek</span><span class="p">());</span>
            <span class="p">}</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span><span class="n">result</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">getValue</span><span class="p">(</span><span class="n">priority</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
        <span class="kt">char</span> <span class="n">op</span> <span class="o">=</span> <span class="n">static_cast</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">(</span><span class="n">cin</span><span class="p">.</span><span class="n">peek</span><span class="p">());</span>
        <span class="k">while</span> <span class="p">(((</span><span class="n">op</span> <span class="o">==</span> <span class="sc">'+'</span> <span class="o">||</span> <span class="n">op</span> <span class="o">==</span> <span class="sc">'-'</span> <span class="p">)</span><span class="o">&amp;&amp;</span> <span class="n">priority</span><span class="o">==</span><span class="mi">2</span><span class="p">)</span><span class="o">||</span><span class="p">((</span><span class="n">op</span> <span class="o">==</span> <span class="sc">'*'</span> <span class="o">||</span> <span class="n">op</span> <span class="o">==</span> <span class="sc">'/'</span> <span class="p">)</span><span class="o">&amp;&amp;</span> <span class="n">priority</span><span class="o">==</span><span class="mi">1</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">cin</span><span class="p">.</span><span class="n">get</span><span class="p">();</span>
            <span class="kt">int</span> <span class="n">value</span> <span class="o">=</span> <span class="n">getValue</span><span class="p">(</span><span class="n">priority</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">op</span> <span class="o">==</span> <span class="sc">'+'</span><span class="p">)</span> <span class="p">{</span> <span class="n">result</span> <span class="o">+=</span> <span class="n">value</span><span class="p">;</span> <span class="p">}</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">op</span> <span class="o">==</span> <span class="sc">'-'</span><span class="p">)</span> <span class="p">{</span> <span class="n">result</span> <span class="o">-=</span> <span class="n">value</span><span class="p">;</span> <span class="p">}</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">op</span> <span class="o">==</span> <span class="sc">'*'</span><span class="p">)</span> <span class="p">{</span> <span class="n">result</span> <span class="o">*=</span> <span class="n">value</span><span class="p">;</span> <span class="p">}</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">op</span> <span class="o">==</span> <span class="sc">'/'</span><span class="p">)</span> <span class="p">{</span> <span class="n">result</span> <span class="o">/=</span> <span class="n">value</span><span class="p">;</span> <span class="p">}</span>
            <span class="n">cout</span> <span class="o">&lt;&lt;</span><span class="n">op</span><span class="p">;</span>
            <span class="n">op</span> <span class="o">=</span> <span class="n">static_cast</span><span class="o">&lt;</span><span class="kt">char</span><span class="o">&gt;</span><span class="p">(</span><span class="n">cin</span><span class="p">.</span><span class="n">peek</span><span class="p">());</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="变量解释">变量解释</h3>
<p>代码中出现的所有变量如下：</p>
<ul>
  <li>priority：int 运算优先级，数值约小越先运算，数值越大越先调用</li>
  <li>isFirstFactor：bool 是否已输出后缀表达式的第一个数</li>
  <li>result ：int 结果暂存</li>
  <li>c: char 用于存储自输入流读入的一个字符</li>
  <li>op：char 用于存储计算符</li>
  <li>value： int 用于存储运算数</li>
</ul>

<h3 id="实现的大概解释">实现的大概解释</h3>
<ol>
  <li>传入参数priority=0时，即为计算叶子节点或括号括起来的表达式</li>
  <li>传入参数priority=1时，即为计算乘除法</li>
  <li>传入参数priority=2时，即为计算加减法</li>
  <li>在实际使用时，主干会产生getValue(2)-&gt;getValue(1)-&gt;getValue(0)的一个递归调用，即自顶向下的递，然后从下至顶的归，是经典的树的递归算法。</li>
</ol>

<h3 id="测试代码">测试代码</h3>
<p>在声明了函数后，直接使用如下代码即能计算稍后输入的正整数的四则运算中缀表达式。</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="n">getValue</span><span class="p">();</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span> <span class="o">&lt;&lt;</span> <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="鬼畜版浓缩重构代码">鬼畜版浓缩重构代码</h3>
<p>下面这段代码花了我一晚上,专门为了鬼畜写的,这都能看懂的,真是巨佬.</p>

<p>其实就是在上面的代码重构调整了一下,去除了输出后缀表达式的部分.然后故弄玄虚改了一些代码.</p>

<p><strong>计算表达式的值功能不变，从前往后三个版本逐渐变地可读</strong></p>

<p>短小精干,11行 6个分号:</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="cp">#define a static_cast&lt;char&gt;(std::cin.peek())
</span>
<span class="cp">#define b static_cast&lt;char&gt;(std::cin.get())
</span>
<span class="kt">int</span> <span class="nf">c</span><span class="p">(</span><span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">2</span><span class="p">){</span>
    <span class="kt">int</span> <span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">d</span><span class="p">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">c</span><span class="p">(</span><span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">a</span> <span class="o">^</span> <span class="mi">40</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="o">!</span><span class="n">d</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">b</span><span class="p">)</span> <span class="n">e</span> <span class="o">=</span> <span class="n">c</span><span class="p">()</span> <span class="o">^</span> <span class="n">b</span> <span class="o">^</span> <span class="mi">41</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">((</span><span class="o">!</span><span class="n">d</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">a</span> <span class="o">&gt;=</span> <span class="mi">48</span> <span class="o">&amp;</span> <span class="n">a</span> <span class="o">&lt;=</span> <span class="mi">57</span><span class="p">)</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">b</span> <span class="o">-</span> <span class="mi">48</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">((</span><span class="n">d</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="mi">1974</span> <span class="o">%</span> <span class="n">a</span><span class="p">))</span> <span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="n">b</span> <span class="o">^</span> <span class="mi">47</span><span class="p">)</span> <span class="o">?</span> <span class="n">e</span> <span class="o">*</span> <span class="n">c</span><span class="p">(</span><span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">:</span> <span class="n">e</span> <span class="o">/</span> <span class="n">c</span><span class="p">(</span><span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">((</span><span class="n">d</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="mi">1935</span> <span class="o">%</span> <span class="n">a</span><span class="p">))</span> <span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="n">b</span> <span class="o">^</span> <span class="mi">45</span><span class="p">)</span> <span class="o">?</span> <span class="n">e</span> <span class="o">+</span> <span class="n">c</span><span class="p">(</span><span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">:</span> <span class="n">e</span> <span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">e</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>下面这个稍微好理解一点</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="cp">#define a static_cast&lt;char&gt;(std::cin.peek())
</span>
<span class="cp">#define b static_cast&lt;char&gt;(std::cin.get())
</span>
<span class="kt">int</span> <span class="nf">c</span><span class="p">(</span><span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="o">!</span><span class="n">d</span><span class="p">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">c</span><span class="p">(</span><span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">d</span> <span class="o">^</span> <span class="mi">40</span><span class="p">))</span> <span class="p">{</span>
        <span class="n">b</span><span class="p">;</span>
        <span class="n">e</span> <span class="o">=</span> <span class="n">c</span><span class="p">();</span>
        <span class="n">b</span><span class="p">;</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">d</span><span class="p">)</span><span class="k">while</span> <span class="p">(</span><span class="n">a</span> <span class="o">&gt;=</span> <span class="mi">48</span> <span class="o">&amp;</span> <span class="n">a</span> <span class="o">&lt;=</span> <span class="mi">57</span><span class="p">)</span> <span class="n">e</span> <span class="o">=</span> <span class="n">e</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">b</span> <span class="o">-</span> <span class="mi">48</span><span class="p">;</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">d</span> <span class="o">&amp;</span> <span class="mi">1</span><span class="p">)</span><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="mi">1974</span> <span class="o">%</span> <span class="n">a</span><span class="p">))</span> <span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="n">b</span> <span class="o">^</span> <span class="mi">47</span><span class="p">)</span> <span class="o">?</span> <span class="n">e</span> <span class="o">*</span> <span class="n">c</span><span class="p">(</span><span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">:</span> <span class="n">e</span> <span class="o">/</span> <span class="n">c</span><span class="p">(</span><span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">d</span> <span class="o">&amp;</span> <span class="mi">2</span><span class="p">)</span><span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="mi">1935</span> <span class="o">%</span> <span class="n">a</span><span class="p">))</span> <span class="n">e</span> <span class="o">=</span> <span class="p">(</span><span class="n">b</span> <span class="o">^</span> <span class="mi">45</span><span class="p">)</span> <span class="o">?</span> <span class="n">e</span> <span class="o">+</span> <span class="n">c</span><span class="p">(</span><span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">:</span> <span class="n">e</span> <span class="o">-</span> <span class="n">c</span><span class="p">(</span><span class="n">d</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">e</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>如果真的想理解这段鬼畜,下面是鬼畜前的优质代码,比较容易理解</p>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp">#include &lt;iostream&gt;
</span>
<span class="cp">#define peek static_cast&lt;char&gt;(std::cin.peek())
</span>
<span class="cp">#define get static_cast&lt;char&gt;(std::cin.get())
</span>
<span class="kt">int</span> <span class="nf">value</span><span class="p">(</span><span class="kt">int</span> <span class="n">priorty</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">priorty</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">value</span><span class="p">(</span><span class="n">priorty</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">peek</span> <span class="o">==</span> <span class="sc">'('</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">get</span><span class="p">;</span>
        <span class="n">result</span> <span class="o">=</span> <span class="n">value</span><span class="p">();</span>
        <span class="n">get</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">priorty</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">peek</span> <span class="o">&gt;=</span> <span class="sc">'0'</span> <span class="o">&amp;&amp;</span> <span class="n">peek</span> <span class="o">&lt;=</span> <span class="sc">'9'</span><span class="p">)</span>
            <span class="n">result</span> <span class="o">=</span> <span class="n">result</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">get</span> <span class="o">-</span> <span class="sc">'0'</span><span class="p">;</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">priorty</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">peek</span> <span class="o">==</span> <span class="sc">'*'</span> <span class="o">||</span> <span class="n">peek</span> <span class="o">==</span> <span class="sc">'/'</span><span class="p">)</span>
            <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">get</span> <span class="o">==</span> <span class="sc">'*'</span><span class="p">)</span> <span class="o">?</span> <span class="n">result</span> <span class="o">*</span> <span class="n">value</span><span class="p">(</span><span class="n">priorty</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">:</span> <span class="n">result</span> <span class="o">/</span> <span class="n">value</span><span class="p">(</span><span class="n">priorty</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">priorty</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">peek</span> <span class="o">==</span> <span class="sc">'+'</span> <span class="o">||</span> <span class="n">peek</span> <span class="o">==</span> <span class="sc">'-'</span><span class="p">)</span>
            <span class="n">result</span> <span class="o">=</span> <span class="p">(</span><span class="n">get</span> <span class="o">==</span> <span class="sc">'+'</span><span class="p">)</span> <span class="o">?</span> <span class="n">result</span> <span class="o">+</span> <span class="n">value</span><span class="p">(</span><span class="n">priorty</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="o">:</span> <span class="n">result</span> <span class="o">-</span> <span class="n">value</span><span class="p">(</span><span class="n">priorty</span> <span class="o">-</span> <span class="mi">1</span><span class="p">);</span>
    <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="鬼畜集成到main函数里">鬼畜集成到main函数里</h3>

<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cp"># include &lt;iostream&gt;
</span>
<span class="cp"># define a static_cast&lt;char&gt;(std::cin.peek())
</span>
<span class="cp"># define b static_cast&lt;char&gt;(std::cin.get())
</span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(</span><span class="kt">int</span> <span class="n">c</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span><span class="kt">char</span><span class="o">**</span> <span class="n">useless</span> <span class="o">=</span> <span class="n">nullptr</span><span class="p">)</span>
<span class="p">{</span>
    <span class="kt">int</span> <span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">main</span><span class="p">(</span><span class="o">-~</span><span class="n">c</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">a</span> <span class="o">^</span> <span class="mi">40</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">c</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">b</span><span class="p">)</span> <span class="n">d</span> <span class="o">=</span> <span class="n">main</span><span class="p">()</span> <span class="o">^</span> <span class="n">b</span> <span class="o">^</span> <span class="mi">41</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">((</span><span class="n">c</span> <span class="o">&gt;&gt;</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">a</span> <span class="o">&gt;=</span> <span class="mi">48</span> <span class="o">&amp;</span> <span class="n">a</span> <span class="o">&lt;=</span> <span class="mi">57</span><span class="p">)</span> <span class="n">d</span> <span class="o">=</span> <span class="n">d</span> <span class="o">*</span> <span class="mi">10</span> <span class="o">+</span> <span class="n">b</span> <span class="o">-</span> <span class="mi">48</span><span class="p">;</span>
    <span class="k">while</span> <span class="p">((</span><span class="n">c</span> <span class="o">&amp;</span> <span class="mi">3</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="mi">1974</span> <span class="o">%</span> <span class="n">a</span><span class="p">))</span> <span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="n">b</span> <span class="o">^</span> <span class="mi">47</span><span class="p">)</span> <span class="o">?</span> <span class="n">d</span> <span class="o">*</span> <span class="n">main</span><span class="p">(</span><span class="o">-~</span><span class="n">c</span><span class="p">)</span> <span class="o">:</span> <span class="n">d</span> <span class="o">/</span> <span class="n">main</span><span class="p">(</span><span class="o">-~</span><span class="n">c</span><span class="p">);</span>
    <span class="k">while</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">c</span> <span class="o">^</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="p">(</span><span class="mi">1935</span> <span class="o">%</span> <span class="n">a</span><span class="p">))</span> <span class="n">d</span> <span class="o">=</span> <span class="p">(</span><span class="n">b</span> <span class="o">^</span> <span class="mi">45</span><span class="p">)</span> <span class="o">?</span> <span class="n">d</span> <span class="o">+</span> <span class="n">main</span><span class="p">(</span><span class="o">-~</span><span class="n">c</span><span class="p">)</span> <span class="o">:</span> <span class="n">d</span> <span class="o">-</span> <span class="n">main</span><span class="p">(</span><span class="o">-~</span><span class="n">c</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">c</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">a</span> <span class="o">^</span> <span class="mi">41</span><span class="p">)</span> <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">d</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
    <span class="k">return</span> <span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="n">c</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="n">a</span> <span class="o">^</span> <span class="mi">41</span><span class="p">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="n">d</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h3 id="licence">Licence</h3>
<ul>
  <li>2019-4-17 24:00:00前，本文代码保留所有权利，不允许分发，复制或者创造衍生物。</li>
  <li>2019-4-17 24:00:00后，使用<a href="http://www.wtfpl.net/txt/copying/">WTFPL</a>开源。</li>
</ul>
:ET