I"<blockquote>
  <p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的那 两个 整数，并返回他们的数组下标。</p>

  <p>你可以假设每种输入只会对应一个答案。但是，你不能重复利用这个数组中同样的元素。</p>

  <p>示例:</p>

  <blockquote>
    <p>给定 nums = [2, 7, 11, 15], target = 9</p>

    <p>因为 nums[0] + nums[1] = 2 + 7 = 9 所以返回 [0, 1]</p>
  </blockquote>
</blockquote>

<h3 id="1暴力破解">1.暴力破解</h3>
<p>新手最容易想到的,暴力破解. 不占空间,但时间复杂度高O(n^2).</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">twoSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
      <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span> <span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
        <span class="k">if</span> <span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span><span class="o">+</span><span class="n">nums</span><span class="p">[</span><span class="n">j</span><span class="p">]</span><span class="o">==</span><span class="n">target</span><span class="p">:</span>
          <span class="k">return</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">]</span>
    <span class="k">return</span> <span class="s">"null"</span>
</code></pre></div></div>
<blockquote>
  <table>
    <tbody>
      <tr>
        <td>7748ms 7.2MB</td>
        <td>5.46% 99.16%</td>
      </tr>
    </tbody>
  </table>
</blockquote>

<hr />
<h3 id="2暴力破解优化版">2.暴力破解优化版&amp;</h3>
<p>其实这才是我直觉的算法,用目标数倒着判断 in list,比暴力版稍微好点,</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">:</span>
  <span class="k">def</span> <span class="nf">twoSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span> <span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">nums</span><span class="p">)):</span>
      <span class="k">if</span> <span class="n">target</span><span class="o">-</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="ow">in</span> <span class="n">nums</span><span class="p">:</span>
        <span class="n">index</span> <span class="o">=</span> <span class="n">nums</span><span class="o">.</span><span class="n">index</span><span class="p">(</span><span class="n">target</span><span class="o">-</span><span class="n">nums</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
        <span class="k">if</span> <span class="n">index</span><span class="o">!=</span><span class="n">i</span><span class="p">:</span>
          <span class="k">return</span> <span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">index</span><span class="p">]</span>
    <span class="k">return</span> <span class="s">"null"</span>
</code></pre></div></div>
<blockquote>
  <table>
    <tbody>
      <tr>
        <td>1136ms 7.2M</td>
        <td>52.88% 95.46%</td>
      </tr>
    </tbody>
  </table>
</blockquote>

<hr />
<h3 id="3字典备忘录">3.字典备忘录~</h3>
<p>优化的话,很容易就想到HashMap,Google一番发现python中的dict就是用的哈希表,这里用字典的话有点备忘录的意思</p>

<p>但发现个问题:看不懂dict和hashmap(java)的区别,先留个TODO在这里.</p>
<ul class="task-list">
  <li class="task-list-item"><input type="checkbox" class="task-list-item-checkbox" disabled="disabled" /><a href="https://zhuanlan.zhihu.com/p/33496977">Python的dict实现原理和Java的HashMap之间的区别</a></li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Solution</span><span class="p">(</span><span class="nb">object</span><span class="p">):</span>
  <span class="k">def</span> <span class="nf">twoSum</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">nums</span><span class="p">,</span> <span class="n">target</span><span class="p">):</span>
    <span class="n">dic</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">num</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">nums</span><span class="p">):</span>
      <span class="k">if</span> <span class="n">num</span> <span class="ow">in</span> <span class="n">dic</span><span class="p">:</span>
        <span class="k">return</span> <span class="p">[</span><span class="n">dic</span><span class="p">[</span><span class="n">num</span><span class="p">],</span> <span class="n">i</span><span class="p">]</span>
      <span class="k">else</span><span class="p">:</span>
        <span class="n">dic</span><span class="p">[</span><span class="n">target</span> <span class="o">-</span> <span class="n">num</span><span class="p">]</span> <span class="o">=</span> <span class="n">i</span>
</code></pre></div></div>
<blockquote>
  <p>68ms 8.1MB 59.03%</p>
</blockquote>

<hr />
:ET